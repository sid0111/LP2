import heapq

def prim(graph, start):
    mst = []
    visited = set()
    min_edges = [(0, start, None)] # Min-heap of (cost, node, parent)

    while min_edges:
        cost, node, parent = heapq.heappop(min_edges)
        if node in visited:
            continue
            
        visited.add(node)
        if parent is not None:
            mst.append((parent, node, cost))

        for neighbor, weight in graph[node]:
            if neighbor not in visited:
                heapq.heappush(min_edges, (weight, neighbor, node))
    return mst

# Example usage:
graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('C', 2), ('D', 5)],
    'C': [('D', 1)],
    'D': []
}
print(prim(graph, 'A'))

#explanation
# Step-by-step:
# Start at 'A', add (0, 'A', None) to heap.

# Visit 'A' → push ('B', 1, 'A'), ('C', 4, 'A')

# Heap: [(1, 'B', 'A'), (4, 'C', 'A')] → Pop 'B'

# Visit 'B' → add edge ('A', 'B', 1)

# Push neighbors ('C', 2, 'B'), ('D', 5, 'B')

# Heap: [(2, 'C', 'B'), (4, 'C', 'A'), (5, 'D', 'B')] → Pop 'C'

# Visit 'C' → add edge ('B', 'C', 2)

# Push ('D', 1, 'C')

# Heap: [(1, 'D', 'C'), (4, 'C', 'A'), (5, 'D', 'B')] → Pop 'D'

# Visit 'D' → add edge ('C', 'D', 1)

# All nodes visited → done